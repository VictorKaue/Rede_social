/**
 * SERVI√áO DE USU√ÅRIOS - USER SERVICE
 * 
 * Este m√≥dulo centraliza todas as opera√ß√µes relacionadas a usu√°rios da rede social.
 * Atualmente usa dados mockados, mas est√° preparado para integra√ß√£o com API real.
 * 
 * FUNCIONALIDADES IMPLEMENTADAS:
 * 1. Gerenciamento de perfis de usu√°rio
 * 2. Sistema de seguir/parar de seguir
 * 3. Estat√≠sticas de seguidores/seguindo
 * 4. Envio de mensagens privadas
 * 5. Compartilhamento de perfis
 * 6. Busca de usu√°rios
 * 
 * BACKEND INTEGRATION STATUS:
 * ‚ùå N√£o integrado - usando dados mockados
 * ‚úÖ Interfaces TypeScript prontas
 * ‚úÖ Estrutura de endpoints definida
 * ‚úÖ Tratamento de erros implementado
 */

import { User, UpdateProfileForm, Message, SendMessageForm } from '../types';
import api from './api';

// ============================================================================
// DADOS MOCKADOS PARA DESENVOLVIMENTO
// ============================================================================

/**
 * MOCK DE USU√ÅRIOS
 * 
 * Simula uma base de dados de usu√°rios para desenvolvimento frontend.
 * Inclui diferentes tipos de perfis para testar cen√°rios variados.
 * 
 * BACKEND TODO:
 * - Substituir por chamadas para GET /api/users
 * - Implementar cache Redis para usu√°rios populares
 * - Adicionar pagina√ß√£o para grandes volumes
 */
let mockUsers: User[] = [
  {
    user_id: 1,
    username: 'joao_silva',
    email: 'joao@exemplo.com',
    birth_date: '1990-05-15',
    profile_photo: null,
    bio: 'Desenvolvedor apaixonado por tecnologia e inova√ß√£o. Sempre aberto para novas conex√µes e colabora√ß√µes! üöÄ',
    location: 'S√£o Paulo, Brasil',
    website: 'https://joaosilva.dev',
    created_at: '2024-01-15T10:00:00Z',
    updated_at: '2024-12-19T10:00:00Z',
    is_verified: true,
  },
  {
    user_id: 2,
    username: 'maria_santos',
    email: 'maria@exemplo.com',
    birth_date: '1988-03-22',
    profile_photo: null,
    bio: 'UX Designer com paix√£o por criar experi√™ncias incr√≠veis. Amo caf√© e bons livros.',
    location: 'Rio de Janeiro, Brasil',
    website: 'https://mariasantos.design',
    created_at: '2024-02-10T14:30:00Z',
    updated_at: '2024-12-18T09:15:00Z',
    is_verified: false,
  },
];

/**
 * MOCK DE DADOS DE RELACIONAMENTOS (SEGUIR/SEGUIDORES)
 * 
 * Simula a tabela 'connections' do banco de dados.
 * Estrutura: Map<user_id, { followers: user_id[], following: user_id[] }>
 * 
 * BACKEND TODO:
 * - Substituir por tabela 'connections' no PostgreSQL/MySQL
 * - Implementar endpoints para gerenciar conex√µes
 * - Adicionar notifica√ß√µes quando algu√©m segue/para de seguir
 * - Cache Redis para contadores de seguidores
 */
let mockFollowingData = new Map<number, { followers: number[], following: number[] }>();
mockFollowingData.set(1, { followers: [2, 3, 4], following: [2, 5] });
mockFollowingData.set(2, { followers: [1], following: [1, 3] });

/**
 * MOCK DE MENSAGENS PRIVADAS
 * 
 * Simula a tabela 'messages' do banco de dados.
 * Armazena mensagens enviadas atrav√©s do sistema.
 * 
 * BACKEND TODO:
 * - Substituir por tabela 'messages' no banco
 * - Implementar WebSocket para mensagens em tempo real
 * - Adicionar criptografia end-to-end para privacidade
 * - Sistema de status de entrega (enviada/recebida/lida)
 */
let mockMessages: Message[] = [];
let nextMessageId = 1;

// ============================================================================
// SERVI√áO PRINCIPAL DE USU√ÅRIOS
// ============================================================================

export const userService = {
  
  /**
   * BUSCAR PERFIL DE USU√ÅRIO
   * 
   * Obt√©m dados completos de um usu√°rio espec√≠fico.
   * Usado para exibir perfis, tanto pr√≥prio quanto de outros usu√°rios.
   * 
   * @param userId - ID √∫nico do usu√°rio
   * @returns Promise<User | null> - Dados do usu√°rio ou null se n√£o encontrado
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/users/:userId/profile
   * - Validar permiss√µes de visualiza√ß√£o
   * - Incluir estat√≠sticas do perfil (posts, seguidores, etc.)
   * - Cache Redis para perfis populares (TTL: 5 minutos)
   * - Rate limiting para prevenir spam de consultas
   */
  async getUserProfile(userId: number): Promise<User | null> {
    const response = await api.get(`/api/users/${userId}/profile`);
    return response.data;
  },

  /**
   * ATUALIZAR PERFIL DO USU√ÅRIO
   * 
   * Permite ao usu√°rio atualizar suas informa√ß√µes pessoais.
   * Suporta atualiza√ß√£o parcial (apenas campos fornecidos s√£o alterados).
   * 
   * @param userId - ID do usu√°rio que est√° atualizando
   * @param profileData - Dados a serem atualizados
   * @returns Promise<User> - Dados atualizados do usu√°rio
   * 
   * REGRAS DE NEG√ìCIO:
   * - Usu√°rio s√≥ pode atualizar pr√≥prio perfil
   * - Username deve ser √∫nico no sistema
   * - Email deve ser v√°lido e √∫nico
   * - Bio limitada a 500 caracteres
   * - Website deve ser URL v√°lida
   * 
   * BACKEND TODO:
   * - Endpoint: PUT /api/users/:userId/profile
   * - Middleware de autentica√ß√£o (verificar se userId = usu√°rio logado)
   * - Valida√ß√£o de unicidade de username/email
   * - Upload de imagem de perfil para cloud storage
   * - Hist√≥rico de altera√ß√µes para auditoria
   * - Trigger para atualizar updated_at automaticamente
   */
  async updateProfile(userId: number, profileData: UpdateProfileForm): Promise<User> {
    const response = await api.put(`/api/users/${userId}/profile`, profileData);
    return response.data;
  },

  /**
   * SEGUIR USU√ÅRIO
   * 
   * Cria uma conex√£o de "seguir" entre o usu√°rio atual e um usu√°rio alvo.
   * Implementa o sistema de rede social da aplica√ß√£o.
   * 
   * @param currentUserId - ID do usu√°rio que quer seguir
   * @param targetUserId - ID do usu√°rio a ser seguido
   * @returns Promise<boolean> - true se seguiu com sucesso, false se j√° estava seguindo
   * 
   * REGRAS DE NEG√ìCIO:
   * - Usu√°rio n√£o pode seguir a si mesmo
   * - N√£o pode seguir o mesmo usu√°rio mais de uma vez
   * - A√ß√£o deve gerar notifica√ß√£o para o usu√°rio seguido
   * - Contadores devem ser atualizados automaticamente
   * 
   * BACKEND TODO:
   * - Endpoint: POST /api/connections/follow
   * - Body: { target_user_id: number }
   * - Inserir registro na tabela 'connections' com status 'accepted'
   * - Trigger para atualizar contadores em cache
   * - Notifica√ß√£o push/email para usu√°rio seguido
   * - Valida√ß√£o: current_user_id != target_user_id
   * - Constraint UNIQUE (user_id, connected_user_id)
   */
  async followUser(currentUserId: number, targetUserId: number): Promise<boolean> {
    const response = await api.post(`/api/connections/follow`, { targetUserId });
    return response.status === 201;
  },

  /**
   * PARAR DE SEGUIR USU√ÅRIO
   * 
   * Remove a conex√£o de "seguir" entre o usu√°rio atual e um usu√°rio alvo.
   * 
   * @param currentUserId - ID do usu√°rio que quer parar de seguir
   * @param targetUserId - ID do usu√°rio a ser "desfollowado"
   * @returns Promise<boolean> - true se parou de seguir, false se n√£o estava seguindo
   * 
   * BACKEND TODO:
   * - Endpoint: DELETE /api/connections/follow/:targetUserId
   * - Remover registro da tabela 'connections'
   * - Trigger para atualizar contadores em cache
   * - N√£o gerar notifica√ß√£o (a√ß√£o silenciosa)
   * - Validar se conex√£o existe antes de tentar remover
   */
  async unfollowUser(currentUserId: number, targetUserId: number): Promise<boolean> {
    const response = await api.delete(`/api/connections/follow/${targetUserId}`);
    return response.status === 200;
  },

  /**
   * VERIFICAR SE EST√Å SEGUINDO USU√ÅRIO
   * 
   * Consulta r√°pida para verificar status de conex√£o entre dois usu√°rios.
   * Usado para mostrar bot√£o "Seguir" ou "Seguindo" na interface.
   * 
   * @param currentUserId - ID do usu√°rio que fez a consulta
   * @param targetUserId - ID do usu√°rio que est√° sendo verificado
   * @returns Promise<boolean> - true se est√° seguindo, false caso contr√°rio
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/connections/is-following/:targetUserId
   * - Query otimizada: SELECT EXISTS(SELECT 1 FROM connections WHERE ...)
   * - Cache Redis para consultas frequentes
   * - Rate limiting para prevenir abuse
   */
  async isFollowing(currentUserId: number, targetUserId: number): Promise<boolean> {
    const response = await api.get(`/api/connections/is-following/${targetUserId}`);
    return response.data.isFollowing;
  },

  /**
   * OBTER ESTAT√çSTICAS DE SEGUIDOR/SEGUINDO
   * 
   * Retorna contadores de seguidores e seguindo para um usu√°rio.
   * Usado para exibir estat√≠sticas no perfil.
   * 
   * @param userId - ID do usu√°rio para obter estat√≠sticas
   * @returns Promise<{followers: number, following: number}> - Contadores
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/users/:userId/follow-stats
   * - View SQL otimizada: SELECT COUNT(*) FROM connections WHERE ...
   * - Cache Redis para contadores (TTL: 5 minutos)
   * - Atualiza√ß√£o autom√°tica via triggers
   * - Incluir em resposta do perfil para reduzir requests
   */
  async getFollowStats(userId: number): Promise<{ followers: number; following: number }> {
    const response = await api.get(`/api/users/${userId}/follow-stats`);
    return response.data;
  },

  /**
   * ENVIAR MENSAGEM PARA USU√ÅRIO
   * 
   * Envia uma mensagem privada para outro usu√°rio da rede social.
   * Base do sistema de chat/mensagens da aplica√ß√£o.
   * 
   * @param messageData - Dados da mensagem (receiver_id, content)
   * @returns Promise<Message> - Mensagem criada com metadados
   * 
   * REGRAS DE NEG√ìCIO:
   * - Usu√°rios bloqueados n√£o podem trocar mensagens
   * - Conte√∫do limitado a 1000 caracteres
   * - Status inicial sempre 'sent'
   * - Destinat√°rio deve receber notifica√ß√£o
   * 
   * BACKEND TODO:
   * - Endpoint: POST /api/messages
   * - Body: { receiver_id: number, content: string }
   * - Verificar se usu√°rios n√£o est√£o bloqueados
   * - WebSocket para entrega em tempo real
   * - Trigger para atualizar status para 'received'
   * - Notifica√ß√£o push para destinat√°rio
   * - Rate limiting para prevenir spam
   * - Filtro de conte√∫do impr√≥prio (opcional)
   */
  async sendMessage(messageData: SendMessageForm): Promise<Message> {
    const response = await api.post(`/api/messages`, messageData);
    return response.data;
  },

  /**
   * COMPARTILHAR PERFIL
   * 
   * Gera URL de compartilhamento para o perfil de um usu√°rio.
   * Automaticamente copia para clipboard se dispon√≠vel.
   * 
   * @param userId - ID do usu√°rio cujo perfil ser√° compartilhado
   * @returns Promise<string> - URL de compartilhamento
   * 
   * FUNCIONALIDADES:
   * - Gera URL amig√°vel (/profile/username)
   * - Copia automaticamente para clipboard
   * - Funciona em todos os browsers modernos
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/users/:userId/share-link
   * - Gerar URLs com par√¢metros de tracking (utm_source, etc.)
   * - Logging de compartilhamentos para analytics
   * - URLs encurtadas para redes sociais (opcional)
   * - Preview cards para WhatsApp/Telegram (meta tags)
   */
  async shareProfile(userId: number): Promise<string> {
    // Simula delay de rede (300ms)
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const user = mockUsers.find(u => u.user_id === userId);
    if (!user) {
      throw new Error('Usu√°rio n√£o encontrado');
    }

    // Gerar URL de compartilhamento amig√°vel
    const shareUrl = `${window.location.origin}/profile/${user.username}`;
    
    // Copiar para clipboard se API dispon√≠vel (browsers modernos)
    if (navigator.clipboard) {
      try {
        await navigator.clipboard.writeText(shareUrl);
      } catch (err) {
        console.warn('N√£o foi poss√≠vel copiar para o clipboard:', err);
      }
    }

    return shareUrl;
  },

  /**
   * BUSCAR USU√ÅRIOS POR TERMO
   * 
   * Implementa busca textual de usu√°rios por username ou bio.
   * Base do sistema de descoberta de pessoas na rede social.
   * 
   * @param searchTerm - Termo de busca
   * @returns Promise<User[]> - Lista de usu√°rios encontrados
   * 
   * CARACTER√çSTICAS:
   * - Busca case-insensitive
   * - Pesquisa em username e bio
   * - Limitado a 10 resultados para performance
   * - Retorna array vazio para termos vazios
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/users/search?q=:searchTerm
   * - Full-text search no PostgreSQL (tsvector) ou Elasticsearch
   * - Busca em m√∫ltiplos campos: username, bio, nome completo
   * - Pagina√ß√£o para grandes resultados
   * - Ordena√ß√£o por relev√¢ncia e popularidade
   * - Cache Redis para termos populares
   * - Rate limiting para prevenir abuse
   * - Autocomplete para sugest√µes em tempo real
   */
  async searchUsers(searchTerm: string): Promise<User[]> {
    const response = await api.get(`/api/users/search?q=${searchTerm}`);
    return response.data;
  },

  /**
   * OBTER CONTAGEM DE SEGUIDORES
   * 
   * Obt√©m a contagem de seguidores de um usu√°rio.
   * 
   * @param userId - ID do usu√°rio
   * @returns Promise<number> - Contagem de seguidores
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/usuario/:userId/followers/count
   * - Query otimizada para contagem
   * - Cache Redis para contagens (TTL: 5 minutos)
   */
  async getFollowerCount(userId: number): Promise<number> {
    const response = await api.get(`/api/usuario/${userId}/followers/count`);
    return response.data;
  },

  /**
   * OBTER CONTAGEM DE SEGUINDO
   * 
   * Obt√©m a contagem de usu√°rios que um usu√°rio est√° seguindo.
   * 
   * @param userId - ID do usu√°rio
   * @returns Promise<number> - Contagem de seguindo
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/usuario/:userId/following/count
   * - Query otimizada para contagem
   * - Cache Redis para contagens (TTL: 5 minutos)
   */
  async getFollowingCount(userId: number): Promise<number> {
    const response = await api.get(`/api/usuario/${userId}/following/count`);
    return response.data;
  },

  /**
   * OBTER CONTAGEM DE POSTS
   * 
   * Obt√©m a contagem de posts de um usu√°rio.
   * 
   * @param userId - ID do usu√°rio
   * @returns Promise<number> - Contagem de posts
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/usuario/:userId/posts/count
   * - Query otimizada para contagem
   * - Cache Redis para contagens (TTL: 5 minutos)
   */
  async getPostCount(userId: number): Promise<number> {
    const response = await api.get(`/api/users/${userId}/posts/count`);
    return response.data.posts;
  },

  /**
   * OBTER CONVERSAS
   * 
   * Obt√©m a lista de conversas do usu√°rio logado.
   * Cada conversa inclui participantes e √∫ltimo mensagem.
   * 
   * @returns Promise<Message[]> - Lista de mensagens/conversas
   * 
   * BACKEND TODO:
   * - Endpoint: GET /api/messages/conversations
   * - Autentica√ß√£o obrigat√≥ria (JWT)
   * - Incluir informa√ß√µes do remetente e destinat√°rio
   * - Ordenar por data da √∫ltima mensagem
   * - Pagina√ß√£o para grandes volumes de mensagens
   */
  async getConversations(): Promise<Message[]> {
    const response = await api.get(`/api/messages/conversations`);
    return response.data;
  },

  /**
   * MARCAR MENSAGEM COMO LIDA
   * 
   * Atualiza o status de uma mensagem para 'lida'.
   * 
   * @param messageId - ID da mensagem a ser marcada como lida
   * @returns Promise<boolean> - true se a mensagem foi marcada como lida com sucesso
   * 
   * BACKEND TODO:
   * - Endpoint: PUT /api/messages/:messageId/read
   * - Atualizar status da mensagem no banco de dados
   * - Notificar destinat√°rio sobre a leitura (opcional)
   * - Rate limiting para prevenir abusos
   */
  async markMessageAsRead(messageId: number): Promise<boolean> {
    const response = await api.put(`/api/messages/${messageId}/read`);
    return response.status === 200;
  }
};

// ============================================================================
// ROADMAP DE INTEGRA√á√ÉO COM BACKEND
// ============================================================================

/**
 * ENDPOINTS A SEREM IMPLEMENTADOS NO BACKEND NODE.JS
 * 
 * ESTRUTURA DE ROTAS SUGERIDA:
 * 
 * /api/users/
 * ‚îú‚îÄ‚îÄ GET    /:userId/profile              # Buscar perfil
 * ‚îú‚îÄ‚îÄ PUT    /:userId/profile              # Atualizar perfil  
 * ‚îú‚îÄ‚îÄ GET    /:userId/follow-stats         # Estat√≠sticas de seguidores
 * ‚îú‚îÄ‚îÄ GET    /:userId/share-link           # Gerar link de compartilhamento
 * ‚îî‚îÄ‚îÄ GET    /search?q=:term               # Buscar usu√°rios
 * 
 * /api/connections/
 * ‚îú‚îÄ‚îÄ POST   /follow                       # Seguir usu√°rio
 * ‚îú‚îÄ‚îÄ DELETE /follow/:targetUserId         # Parar de seguir
 * ‚îî‚îÄ‚îÄ GET    /is-following/:targetUserId   # Verificar se est√° seguindo
 * 
 * /api/messages/
 * ‚îú‚îÄ‚îÄ POST   /                            # Enviar mensagem
 * ‚îú‚îÄ‚îÄ GET    /conversations               # Listar conversas
 * ‚îî‚îÄ‚îÄ PUT    /:messageId/read             # Marcar como lida
 * 
 * MIDDLEWARE NECESS√ÅRIOS:
 * - authMiddleware: Verificar JWT token em todas as rotas
 * - validationMiddleware: Validar dados de entrada
 * - rateLimitMiddleware: Limitar requests por IP/usu√°rio
 * - errorHandlerMiddleware: Tratamento centralizado de erros
 * 
 * BANCO DE DADOS:
 * - Tabelas: users, connections, messages
 * - √çndices: username, email, (user_id, connected_user_id)
 * - Triggers: Atualizar contadores automaticamente
 * - Views: Estat√≠sticas agregadas para performance
 * 
 * CACHE REDIS:
 * - user_profile:{userId} (TTL: 5min)
 * - follow_stats:{userId} (TTL: 5min)  
 * - search_results:{term} (TTL: 1min)
 * - is_following:{userId}:{targetId} (TTL: 1min)
 * 
 * NOTIFICA√á√ïES:
 * - WebSocket para mensagens em tempo real
 * - Push notifications para novas conex√µes
 * - Email notifications para marcos (novos seguidores)
 * 
 * SEGURAN√áA:
 * - Valida√ß√£o de permiss√µes (s√≥ pode editar pr√≥prio perfil)
 * - Sanitiza√ß√£o de entrada (prevenir XSS)
 * - Rate limiting rigoroso para busca e mensagens
 * - Logs de auditoria para a√ß√µes sens√≠veis
 */